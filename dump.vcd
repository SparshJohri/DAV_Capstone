$date
	Mon Apr 15 11:03:27 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module FFT_step1_tb $end
$var parameter 32 ! SAMPLES $end
$var parameter 32 " STAGE $end
$var parameter 32 # WIDTH $end
$var reg 1 $ clk $end
$scope module tester $end
$var wire 1 $ clk $end
$var wire 2 % stage_number [1:0] $end
$var wire 1 & which_factor2_MASK $end
$var wire 32 ' twiddle_factor_to_use2 [31:0] $end
$var wire 2 ( out2_dx [1:0] $end
$var wire 2 ) out1_dx [1:0] $end
$var wire 2 * in2_dx [1:0] $end
$var wire 2 + in1_dx [1:0] $end
$var wire 32 , dispOut2 [31:0] $end
$var wire 32 - dispOut1 [31:0] $end
$var parameter 32 . SAMPLES $end
$var parameter 32 / TOTAL_STAGES $end
$var parameter 32 0 WIDTH $end
$var reg 2 1 idx [1:0] $end
$var reg 2 2 jdx [1:0] $end
$var reg 1 3 jdx_finish $end
$var reg 1 4 which_factor2 $end
$scope module butterfly2 $end
$var wire 32 5 input1 [31:0] $end
$var wire 32 6 input2 [31:0] $end
$var wire 1 7 twiddle_real_sign $end
$var wire 16 8 twiddle_real_abs [15:0] $end
$var wire 16 9 twiddle_real [15:0] $end
$var wire 1 : twiddle_imag_sign $end
$var wire 16 ; twiddle_imag_abs [15:0] $end
$var wire 16 < twiddle_imag [15:0] $end
$var wire 32 = twiddle [31:0] $end
$var wire 16 > output_real_B_times_W_with_twiddle_real [15:0] $end
$var wire 16 ? output_real_B_times_W_with_twiddle_imag [15:0] $end
$var wire 16 @ output_real_B_times_W [15:0] $end
$var wire 16 A output_imag_B_times_W_with_twiddle_real [15:0] $end
$var wire 16 B output_imag_B_times_W_with_twiddle_imag [15:0] $end
$var wire 16 C output_imag_B_times_W [15:0] $end
$var wire 32 D output2 [31:0] $end
$var wire 32 E output1 [31:0] $end
$var wire 1 F input2_real_sign $end
$var wire 16 G input2_real_abs [15:0] $end
$var wire 16 H input2_real [15:0] $end
$var wire 1 I input2_imag_sign $end
$var wire 16 J input2_imag_abs [15:0] $end
$var wire 16 K input2_imag [15:0] $end
$var wire 1 L input1_real_sign $end
$var wire 16 M input1_real_abs [15:0] $end
$var wire 16 N input1_real [15:0] $end
$var wire 1 O input1_imag_sign $end
$var wire 16 P input1_imag_abs [15:0] $end
$var wire 16 Q input1_imag [15:0] $end
$var parameter 32 R DIVIDER $end
$var parameter 32 S SAMPLES $end
$var parameter 33 T SHIFTER $end
$var parameter 32 U WIDTH $end
$scope module input1_imag_getter $end
$var wire 16 V input1 [15:0] $end
$var wire 1 O negativeSign $end
$var wire 16 W output1 [15:0] $end
$var parameter 32 X WIDTH $end
$var reg 16 Y mid1 [15:0] $end
$var reg 1 Z mid2 $end
$upscope $end
$scope module input1_real_getter $end
$var wire 16 [ input1 [15:0] $end
$var wire 1 L negativeSign $end
$var wire 16 \ output1 [15:0] $end
$var parameter 32 ] WIDTH $end
$var reg 16 ^ mid1 [15:0] $end
$var reg 1 _ mid2 $end
$upscope $end
$scope module input2_imag_getter $end
$var wire 16 ` input1 [15:0] $end
$var wire 1 I negativeSign $end
$var wire 16 a output1 [15:0] $end
$var parameter 32 b WIDTH $end
$var reg 16 c mid1 [15:0] $end
$var reg 1 I mid2 $end
$upscope $end
$scope module input2_real_getter $end
$var wire 16 d input1 [15:0] $end
$var wire 1 F negativeSign $end
$var wire 16 e output1 [15:0] $end
$var parameter 32 f WIDTH $end
$var reg 16 g mid1 [15:0] $end
$var reg 1 F mid2 $end
$upscope $end
$scope module twiddle_imag_getter $end
$var wire 16 h input1 [15:0] $end
$var wire 1 : negativeSign $end
$var wire 16 i output1 [15:0] $end
$var parameter 32 j WIDTH $end
$var reg 16 k mid1 [15:0] $end
$var reg 1 : mid2 $end
$upscope $end
$scope module twiddle_real_getter $end
$var wire 16 l input1 [15:0] $end
$var wire 1 7 negativeSign $end
$var wire 16 m output1 [15:0] $end
$var parameter 32 n WIDTH $end
$var reg 16 o mid1 [15:0] $end
$var reg 1 7 mid2 $end
$upscope $end
$upscope $end
$scope module getTwiddleForIteration2 $end
$var wire 16 p result_imag [15:0] $end
$var wire 16 q result_real [15:0] $end
$var wire 1 4 which_factor $end
$var wire 32 r x [31:0] $end
$var wire 32 s result [31:0] $end
$var parameter 32 t SAMPLES $end
$var parameter 32 u WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$scope module prepareForFFT $end
$var parameter 32 v SAMPLES $end
$var parameter 32 w WIDTH $end
$scope begin ASSIGNER[0] $end
$var parameter 2 x i $end
$upscope $end
$scope begin ASSIGNER[1] $end
$var parameter 2 y i $end
$upscope $end
$scope begin ASSIGNER[2] $end
$var parameter 3 z i $end
$upscope $end
$scope begin ASSIGNER[3] $end
$var parameter 3 { i $end
$upscope $end
$upscope $end
$scope module scrambleForFFT_tb $end
$var parameter 32 | SAMPLES $end
$var parameter 32 } WIDTH $end
$scope begin SCRAMBLE_INPUTS[0] $end
$var parameter 2 ~ i $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[1] $end
$var parameter 2 !" i $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[2] $end
$var parameter 3 "" i $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[3] $end
$var parameter 3 #" i $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[4] $end
$var parameter 4 $" i $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[5] $end
$var parameter 4 %" i $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[6] $end
$var parameter 4 &" i $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[7] $end
$var parameter 4 '" i $end
$upscope $end
$scope module tester $end
$var parameter 32 (" SAMPLES $end
$var parameter 32 )" WIDTH $end
$scope begin SCRAMBLE_INPUTS[0] $end
$var parameter 2 *" i $end
$scope module E $end
$var wire 3 +" input_stream [2:0] $end
$var wire 3 ," output_stream [2:0] $end
$var parameter 32 -" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 ." i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 /" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 0" i $end
$upscope $end
$upscope $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[1] $end
$var parameter 2 1" i $end
$scope module E $end
$var wire 3 2" input_stream [2:0] $end
$var wire 3 3" output_stream [2:0] $end
$var parameter 32 4" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 5" i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 6" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 7" i $end
$upscope $end
$upscope $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[2] $end
$var parameter 3 8" i $end
$scope module E $end
$var wire 3 9" input_stream [2:0] $end
$var wire 3 :" output_stream [2:0] $end
$var parameter 32 ;" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 <" i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 =" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 >" i $end
$upscope $end
$upscope $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[3] $end
$var parameter 3 ?" i $end
$scope module E $end
$var wire 3 @" input_stream [2:0] $end
$var wire 3 A" output_stream [2:0] $end
$var parameter 32 B" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 C" i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 D" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 E" i $end
$upscope $end
$upscope $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[4] $end
$var parameter 4 F" i $end
$scope module E $end
$var wire 3 G" input_stream [2:0] $end
$var wire 3 H" output_stream [2:0] $end
$var parameter 32 I" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 J" i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 K" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 L" i $end
$upscope $end
$upscope $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[5] $end
$var parameter 4 M" i $end
$scope module E $end
$var wire 3 N" input_stream [2:0] $end
$var wire 3 O" output_stream [2:0] $end
$var parameter 32 P" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 Q" i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 R" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 S" i $end
$upscope $end
$upscope $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[6] $end
$var parameter 4 T" i $end
$scope module E $end
$var wire 3 U" input_stream [2:0] $end
$var wire 3 V" output_stream [2:0] $end
$var parameter 32 W" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 X" i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 Y" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 Z" i $end
$upscope $end
$upscope $end
$upscope $end
$scope begin SCRAMBLE_INPUTS[7] $end
$var parameter 4 [" i $end
$scope module E $end
$var wire 3 \" input_stream [2:0] $end
$var wire 3 ]" output_stream [2:0] $end
$var parameter 32 ^" WIDTH $end
$scope begin REVERSE_LOOP[0] $end
$var parameter 2 _" i $end
$upscope $end
$scope begin REVERSE_LOOP[1] $end
$var parameter 2 `" i $end
$upscope $end
$scope begin REVERSE_LOOP[2] $end
$var parameter 3 a" i $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 a"
b1 `"
b0 _"
b11 ^"
b111 ["
b10 Z"
b1 Y"
b0 X"
b11 W"
b110 T"
b10 S"
b1 R"
b0 Q"
b11 P"
b101 M"
b10 L"
b1 K"
b0 J"
b11 I"
b100 F"
b10 E"
b1 D"
b0 C"
b11 B"
b11 ?"
b10 >"
b1 ="
b0 <"
b11 ;"
b10 8"
b10 7"
b1 6"
b0 5"
b11 4"
b1 1"
b10 0"
b1 /"
b0 ."
b11 -"
b0 *"
b11 )"
b1000 ("
b111 '"
b110 &"
b101 %"
b100 $"
b11 #"
b10 ""
b1 !"
b0 ~
b11 }
b1000 |
b11 {
b10 z
b1 y
b0 x
b10 w
b100 v
b100000 u
b10 t
b10000 n
b10000 j
b10000 f
b10000 b
b10000 ]
b10000 X
b100000 U
b1111 T
b100 S
b1000000000000000 R
b100000 0
b0 /
b100 .
b100000 #
b0 "
b100 !
$end
#0
$dumpvars
b111 ]"
b111 \"
b11 V"
b110 U"
b101 O"
b101 N"
b1 H"
b100 G"
b110 A"
b11 @"
b10 :"
b10 9"
b100 3"
b1 2"
b0 ,"
b0 +"
bx s
b0 r
bx q
bx p
bx o
bx m
bx l
bx k
bx i
bx h
b10010110 g
b10010110 e
b10010110 d
b0 c
b0 a
b0 `
0_
b1100100 ^
b1100100 \
b1100100 [
0Z
b0 Y
b0 W
b0 V
b0 Q
b0 P
0O
b1100100 N
b1100100 M
0L
b0 K
b0 J
0I
b10010110 H
b10010110 G
0F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
1:
bx 9
bx 8
17
b10010110 6
b1100100 5
x4
03
b0 2
b0 1
bx -
bx ,
b0 +
b1 *
b0 )
b1 (
bx '
1&
b0 %
0$
$end
#1
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b10010110 N
b10010110 [
b11001000 H
b11001000 d
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
b0 C
b0 A
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b11001000 @
b11001000 >
b0 B
b0 ?
07
b1000000000000000 8
b1000000000000000 m
b1000000000000000 o
0:
b0 ;
b0 i
b0 k
b1000000000000000 9
b1000000000000000 l
b0 <
b0 h
b1000000000000000 q
b1000000000000000 '
b1000000000000000 =
b1000000000000000 s
b0 p
04
1$
#2
0$
#3
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#4
0$
#5
b1100100 @
b1100100 >
b11111010 M
b11111010 \
b11111010 ^
b1100100 G
b1100100 e
b1100100 g
b101011110 -
b101011110 E
b10010110 ,
b10010110 D
b11111010 N
b11111010 [
b1100100 H
b1100100 d
03
b1 2
b11111010 5
b11 +
b1100100 6
b0 *
b11 )
b0 (
b1 1
1$
#6
0$
#7
b11111010 @
b11111010 >
b11001000 M
b11001000 \
b11001000 ^
b11111010 G
b11111010 e
b11111010 g
b111000010 -
b111000010 E
b1111111111001110 ,
b1111111111001110 D
b11001000 N
b11001000 [
b11111010 H
b11111010 d
13
b11001000 5
b10 +
b11111010 6
b11 *
b10 )
b11 (
b0 2
1$
#8
0$
#9
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b1 2
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b10 1
1$
#10
0$
#11
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#12
0$
#13
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#14
0$
#15
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#16
0$
#17
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#18
0$
#19
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#20
0$
#21
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#22
0$
#23
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#24
0$
#25
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#26
0$
#27
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#28
0$
#29
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#30
0$
#31
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#32
0$
#33
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#34
0$
#35
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#36
0$
#37
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#38
0$
#39
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#40
0$
#41
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#42
0$
#43
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#44
0$
#45
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#46
0$
#47
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#48
0$
#49
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#50
0$
#51
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#52
0$
#53
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#54
0$
#55
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#56
0$
#57
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#58
0$
#59
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#60
0$
#61
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#62
0$
#63
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#64
0$
#65
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#66
0$
#67
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#68
0$
#69
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#70
0$
#71
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#72
0$
#73
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#74
0$
#75
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#76
0$
#77
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#78
0$
#79
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#80
0$
#81
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#82
0$
#83
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#84
0$
#85
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#86
0$
#87
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#88
0$
#89
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#90
0$
#91
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#92
0$
#93
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#94
0$
#95
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#96
0$
#97
b11001000 @
b11001000 >
b10010110 M
b10010110 \
b10010110 ^
b11001000 G
b11001000 e
b11001000 g
b101011110 -
b101011110 E
b1111111111001110 ,
b1111111111001110 D
b10010110 N
b10010110 [
b11001000 H
b11001000 d
03
b10010110 5
b1 +
b11001000 6
b10 *
b1 )
b10 (
b1 2
1$
#98
0$
#99
b10010110 @
b10010110 >
b1100100 M
b1100100 \
b1100100 ^
b10010110 G
b10010110 e
b10010110 g
b11111010 -
b11111010 E
b1111111111001110 ,
b1111111111001110 D
b1100100 N
b1100100 [
b10010110 H
b10010110 d
13
b1100100 5
b0 +
b10010110 6
b1 *
b0 )
b1 (
b0 2
1$
#100
0$
