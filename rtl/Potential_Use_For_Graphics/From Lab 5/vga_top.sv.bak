module vga_top 
(
    input clk,
    output [3:0] red,
    output [3:0] green,
    output [3:0] blue,
    output hsync,
    output vsync,
	 output [5:0] led_debugging
);
	 logic [7:0] updated_value_of_block;
	 logic [9:0] x;
	 logic [9:0] y;
	 
	 logic [2:0] input_red = 6;
	 logic [2:0] input_green = 0;
	 logic [1:0] input_blue = 0;
	 logic [7:0] color = 0;
	 
	 wire res_clock;
    wire [$clog2(526)-1:0]  vc_count;
    wire [$clog2(801)-1:0]  hc_count;
	 
	 assign x = hc_count/20;
	 assign y = vc_count/20;

	 
	 logic [32-1:0] frequency_bins [8-1:0];
	 logic reset;
	 
	 assign frequency_bins[0] = 100;
	 assign frequency_bins[1] = 0;
	 assign frequency_bins[2] = 60;
	 assign frequency_bins[3] = 70;
	 assign frequency_bins[4] = 10;
	 assign frequency_bins[5] = 40;
	 assign frequency_bins[6] = 30;
	 assign frequency_bins[7] = 0;
	 
	 assign reset = 0;

	 /*
	 pll_2 DataClock //get the clock for the VGA 
	 (
		clk,
		res_clock
	 );
	 */
	 assign res_clock = clk;
	 
	 logic [5:0] playerX_out;
	 complex_graphics_controller #(8, 32, 0, 32, 0, 12) getColor //calculate the next pixel for the given block
	 (
		.clk(res_clock),
		.frequency_bins(frequency_bins),
		.x_coord_of_current_block(x),
		.y_coord_of_current_block(y),
		.whichRAM(write_to_two),
		.pixelPacking(updated_value_of_block),
		.reset(reset),
		.playerX_out(playerX_out)
	 );
	 
	 ping_pong #(8, 32) color_getter //update the internal array for the given block and get the current value for the given block
	 (
		.clk(res_clock),
		.hc(hc_count),
		.vc(vc_count),
		.updated_value_of_block(updated_value_of_block),
		.pixel_to_display(color)
	 );
	 
	 vga #(8, 32) VGA //calculate the hsync, vsync, and the three colors from the pixel packing
	 (
        .vgaclk(res_clock),
		  .colorPacking(color),
        .hc_out(hc_count),
        .vc_out(vc_count),
        .hsync(hsync),
        .vsync(vsync),
        .red(red),
        .green(green),
        .blue(blue)
    );
	 
	 assign led_debugging = playerX_out;

endmodule